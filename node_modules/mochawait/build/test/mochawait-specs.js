/* global describe:true, before:true, beforeEach:true, afterEach:true, it:true, after:true */
require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

require('../index');

require('should');

var _mocha = require('mocha');

function sleep(ms) {
  var start, p;
  return _regeneratorRuntime.async(function sleep$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        start = Date.now();
        p = new _Promise(function (resolve) {
          setTimeout(function () {
            var end = Date.now();
            if (end - start < ms) {
              setTimeout(function () {
                resolve();
              }, end - start);
            } else {
              resolve();
            }
          }, ms);
        });
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(p);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function slowDouble(x) {
  return _regeneratorRuntime.async(function slowDouble$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(sleep(10));

      case 2:
        return context$1$0.abrupt('return', x * 2);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function slowConcat(str, extra) {
  return _regeneratorRuntime.async(function slowConcat$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(sleep(20));

      case 2:
        return context$1$0.abrupt('return', str + extra);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

describe('mochawait tests', function () {
  var myInt = 2,
      myStr = '',
      testsRun = 0;

  before(function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          this.should.be.instanceOf(_mocha.Context);
          this.should.have.a.property('timeout');
          start = Date.now();

          myStr.should.equal('');
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(slowConcat(myStr, 'foo'));

        case 6:
          myStr = context$2$0.sent;

          (Date.now() - start).should.be.above(19);

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  beforeEach(function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          this.should.be.instanceOf(_mocha.Context);
          this.should.have.a.property('timeout');
          start = Date.now();
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(slowDouble(myInt));

        case 5:
          myInt = context$2$0.sent;

          (Date.now() - start).should.be.above(9);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  after(function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          this.should.be.instanceOf(_mocha.Context);
          this.should.have.a.property('timeout');
          start = Date.now();
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(slowDouble(myInt));

        case 5:
          myInt = context$2$0.sent;

          (Date.now() - start).should.be.above(9);
          myInt.should.equal(32);

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  afterEach(function callee$1$0() {
    var start, i;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          this.should.be.instanceOf(_mocha.Context);
          this.should.have.a.property('timeout');
          start = Date.now();
          i = 0;

        case 4:
          if (!(i < 5)) {
            context$2$0.next = 10;
            break;
          }

          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(sleep(10));

        case 7:
          i++;
          context$2$0.next = 4;
          break;

        case 10:
          if (testsRun === 1) {
            myStr.should.equal('foobar');
          } else {
            myStr.should.equal('foobarbaz');
          }
          (Date.now() - start).should.be.above(49);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should work like mocha', function callee$1$0() {
    var start, then;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          this.should.be.instanceOf(_mocha.Context);
          this.should.have.a.property('timeout');
          myStr.should.equal('foo');
          myInt.should.equal(4);
          start = Date.now();
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(slowDouble(myInt));

        case 7:
          myInt = context$2$0.sent;
          then = Date.now();

          (then - start).should.be.above(9);
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(slowConcat(myStr, 'bar'));

        case 12:
          myStr = context$2$0.sent;

          (Date.now() - start).should.be.above(19);
          testsRun++;

        case 15:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should work like mocha some more', function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          this.should.be.instanceOf(_mocha.Context);
          this.should.have.a.property('timeout');
          myStr.should.equal('foobar');
          myInt.should.equal(16);
          start = Date.now();
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(slowConcat(myStr, 'baz'));

        case 7:
          myStr = context$2$0.sent;

          (Date.now() - start).should.be.above(19);
          testsRun++;

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});
//# sourceMappingURL=data:application/json;base64,